// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"nova-factory-server/app/business/ai/aiDataSetController"
	"nova-factory-server/app/business/ai/aiDataSetDao/aiDataSetDaoImpl"
	"nova-factory-server/app/business/ai/aiDataSetService/aiDataSetServiceImpl"
	"nova-factory-server/app/business/alert/alertController"
	"nova-factory-server/app/business/alert/alertDao/alertDaoImpl"
	"nova-factory-server/app/business/alert/alertService/alertServiceImpl"
	"nova-factory-server/app/business/asset/building/buildingController"
	"nova-factory-server/app/business/asset/building/buildingDao/buildingDaoImpl"
	"nova-factory-server/app/business/asset/building/buildingService/buildingServiceImpl"
	"nova-factory-server/app/business/asset/device/deviceController"
	"nova-factory-server/app/business/asset/device/deviceDao/deviceDaoImpl"
	"nova-factory-server/app/business/asset/device/deviceService/deviceServiceImpl"
	"nova-factory-server/app/business/asset/material/materialController"
	"nova-factory-server/app/business/asset/material/materialDao/materialDaoImpl"
	"nova-factory-server/app/business/asset/material/materialService/materialServiceImpl"
	"nova-factory-server/app/business/craft/craftRouteController"
	"nova-factory-server/app/business/craft/craftRouteDao/craftRouteDaoImpl"
	"nova-factory-server/app/business/craft/craftRouteService/craftRouteServiceImpl"
	"nova-factory-server/app/business/daemonize/daemonizeController"
	"nova-factory-server/app/business/daemonize/daemonizeDao/daemonizeDaoImpl"
	"nova-factory-server/app/business/daemonize/daemonizeService/daemonizeServiceImpl"
	"nova-factory-server/app/business/dashboard/dashboardController"
	"nova-factory-server/app/business/dashboard/dashboardDao/dashboardDaoImpl"
	"nova-factory-server/app/business/dashboard/dashboardService/dashboardServiceImpl"
	"nova-factory-server/app/business/deviceMonitor/deviceMonitorController"
	"nova-factory-server/app/business/deviceMonitor/deviceMonitorDao/deviceMonitorDaoImpl"
	"nova-factory-server/app/business/deviceMonitor/deviceMonitorService/deviceMonitorServiceImpl"
	"nova-factory-server/app/business/metric/device/metricController"
	"nova-factory-server/app/business/metric/device/metricDao/metricDaoIMpl"
	"nova-factory-server/app/business/metric/device/metricService/metricServiceImpl"
	"nova-factory-server/app/business/monitor/monitorController"
	"nova-factory-server/app/business/monitor/monitorDao/monitorDaoImpl"
	"nova-factory-server/app/business/monitor/monitorService/monitorServiceImpl"
	"nova-factory-server/app/business/system/systemController"
	"nova-factory-server/app/business/system/systemDao/systemDaoImpl"
	"nova-factory-server/app/business/system/systemService/systemServiceImpl"
	"nova-factory-server/app/business/tool/toolController"
	"nova-factory-server/app/business/tool/toolDao/toolDaoImpl"
	"nova-factory-server/app/business/tool/toolService/toolServiceImpl"
	"nova-factory-server/app/datasource/cache"
	"nova-factory-server/app/datasource/clickhouse"
	"nova-factory-server/app/datasource/iotdb"
	"nova-factory-server/app/datasource/mysql"
	"nova-factory-server/app/datasource/objectFile"
	"nova-factory-server/app/routes"
)

// Injectors from wire.go:

func wireApp() (*gin.Engine, func(), error) {
	cacheCache := cache.NewCache()
	sqlyContext, cleanup, err := mysql.NewData()
	if err != nil {
		return nil, nil, err
	}
	iUserDao := systemDaoImpl.NewSysUserDao(sqlyContext)
	iPermissionDao := systemDaoImpl.NewSysPermissionDao(sqlyContext)
	iRoleDao := systemDaoImpl.NewSysRoleDao(sqlyContext)
	iLogininforDao := monitorDaoImpl.NewLogininforDao(sqlyContext)
	iConfigDao := systemDaoImpl.NewSysConfigDao(sqlyContext)
	iConfigService := systemServiceImpl.NewConfigService(iConfigDao, cacheCache)
	iLoginService := systemServiceImpl.NewLoginService(cacheCache, iUserDao, iPermissionDao, iRoleDao, iLogininforDao, iConfigService)
	iUserPostDao := systemDaoImpl.NewSysUserPostDao(sqlyContext)
	iUserRoleDao := systemDaoImpl.NewSysUserRoleDao(sqlyContext)
	objectFileObjectFile := objectFile.NewConfig()
	iDeptDao := systemDaoImpl.NewSysDeptDao(sqlyContext)
	iPostDao := systemDaoImpl.NewSysPostDao(sqlyContext)
	iUserDeptScopeDao := systemDaoImpl.NewSysUserDeptScopeDao(sqlyContext)
	iUserService := systemServiceImpl.NewUserService(sqlyContext, iUserDao, iUserPostDao, iUserRoleDao, objectFileObjectFile, iDeptDao, iRoleDao, iPostDao, iUserDeptScopeDao, iConfigService)
	iLogininforService := monitorServiceImpl.NewLogininforService(iLogininforDao)
	login := systemController.NewLogin(iLoginService, iUserService, iConfigService, iLogininforService)
	iPostService := systemServiceImpl.NewPostService(iPostDao)
	iRolePermissionDao := systemDaoImpl.NewSysRolePermissionDao(sqlyContext)
	iRoleService := systemServiceImpl.NewRoleService(sqlyContext, iRoleDao, iRolePermissionDao, iUserRoleDao)
	user := systemController.NewUser(iUserService, iPostService, iRoleService)
	iDeptService := systemServiceImpl.NewDeptService(iDeptDao, iRoleDao)
	dept := systemController.NewDept(iDeptService)
	iDictTypeDao := systemDaoImpl.NewSysDictTypeDao(sqlyContext)
	iDictTypeService := systemServiceImpl.NewDictTypeService(iDictTypeDao, cacheCache)
	iDictDataDao := systemDaoImpl.NewSysDictDataDao(sqlyContext)
	iDictDataService := systemServiceImpl.NewDictDataService(iDictDataDao, cacheCache)
	dictType := systemController.NewDictType(iDictTypeService, iDictDataService)
	dictData := systemController.NewDictData(iDictDataService)
	role := systemController.NewRole(iRoleService)
	post := systemController.NewPost(iPostService)
	profile := systemController.NewProfile(iUserService)
	config := systemController.NewConfig(iConfigService)
	iFileService := systemServiceImpl.NewFileService(objectFileObjectFile)
	file := systemController.NewFile(iFileService)
	iSseService := systemServiceImpl.NewSseService(cacheCache)
	sse := systemController.NewSse(iSseService)
	iSysNoticeDao := systemDaoImpl.NewSysNoticeDao(sqlyContext)
	iSysNoticeService := systemServiceImpl.NewNoticeService(iSysNoticeDao, iUserDao, iSseService)
	notice := systemController.NewNotice(iSysNoticeService)
	iSysPermissionService := systemServiceImpl.NewPermissionService(iPermissionDao)
	permission := systemController.NewPermission(iSysPermissionService)
	iSelectBoxService := systemServiceImpl.NewSelectService(iPermissionDao, iDeptDao)
	selectBox := systemController.NewSelectBox(iSelectBoxService)
	db := mysql.NewDB()
	iDeviceElectricDao := systemDaoImpl.NewIDeviceElectricDaoImpl(db)
	iDeviceDao := deviceDaoImpl.NewSysDeviceDaoImpl(db)
	clickHouse, err := clickhouse.NewClickHouse()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	iotDb := iotdb.NewIotDb()
	iMetricDao := metricDaoIMpl.NewMetricDaoImpl(clickHouse, iotDb)
	iDeviceElectricService := systemServiceImpl.NewIDeviceElectricServiceImpl(iDeviceElectricDao, iDeviceDao, iMetricDao)
	iDeviceGroupDao := deviceDaoImpl.NewSysDeviceGroupDaoImpl(db)
	iSysModbusDeviceConfigDataDao := deviceDaoImpl.NewISysModbusDeviceConfigDataDaoImp(db)
	iDeviceDataReportDao := deviceMonitorDaoImpl.NewIDeviceDataReportDaoImpl(db)
	iDeviceService := deviceServiceImpl.NewDeviceService(iDeviceDao, iDeviceGroupDao, iUserDao, iMetricDao, iSysModbusDeviceConfigDataDao, iDeviceDataReportDao)
	electric := systemController.NewElectric(iDeviceElectricService, iDeviceService)
	iSysShiftDao := systemDaoImpl.NewISysShiftDaoImpl(db)
	iSysShiftService := systemServiceImpl.NewISysShiftServiceImpl(iSysShiftDao)
	shift := systemController.NewShift(iSysShiftService)
	system := &systemController.System{
		Login:      login,
		User:       user,
		Dept:       dept,
		DictType:   dictType,
		DictData:   dictData,
		Role:       role,
		Post:       post,
		Profile:    profile,
		Config:     config,
		File:       file,
		Sse:        sse,
		Notice:     notice,
		Permission: permission,
		SelectBox:  selectBox,
		Electric:   electric,
		Shift:      shift,
	}
	infoServer := monitorController.NewInfoServer()
	iUserOnlineService := monitorServiceImpl.NewUserOnlineService(cacheCache)
	userOnline := monitorController.NewUserOnline(iUserOnlineService)
	logininfor := monitorController.NewLogininfor(iLogininforService)
	iOperLog := monitorDaoImpl.NewOperLog(sqlyContext)
	iSysOperLogService := monitorServiceImpl.NewOperLog(iOperLog)
	operLog := monitorController.NewOperLog(iSysOperLogService)
	iJobDao := monitorDaoImpl.NewJobDao(sqlyContext)
	iJobService := monitorServiceImpl.NewJobService(cacheCache, iJobDao)
	job := monitorController.NewJob(iJobService)
	monitor := &monitorController.Monitor{
		Server:     infoServer,
		UserOnline: userOnline,
		Logfor:     logininfor,
		Oper:       operLog,
		Job:        job,
	}
	iGenTableColumn := toolDaoImpl.NewGenTableColumnDao(sqlyContext)
	iGenTable := toolDaoImpl.GetGenTableDao(sqlyContext)
	iGenTableService := toolServiceImpl.NewGenTabletService(iGenTableColumn, iGenTable)
	genTable := toolController.NewGenTable(iGenTableService)
	tool := &toolController.Tool{
		GenTable: genTable,
	}
	deviceInfo := deviceController.NewDeviceInfo(iDeviceService)
	iDeviceGroupService := deviceServiceImpl.NewDeviceGroupService(iDeviceGroupDao, iUserDao)
	deviceGroup := deviceController.NewDeviceGroup(iDeviceGroupService)
	iDeviceTemplateDao := deviceDaoImpl.NewIDeviceTemplateDaoImpl(db)
	iDeviceTemplateService := deviceServiceImpl.NewDeviceTemplateServiceImpl(iDeviceTemplateDao, iSysModbusDeviceConfigDataDao)
	template, err := deviceController.NewTemplate(iDeviceTemplateService)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	iSysModbusDeviceConfigDataService := deviceServiceImpl.NewISysModbusDeviceConfigDataServiceImpl(iSysModbusDeviceConfigDataDao)
	templateData := deviceController.NewTemplateData(iSysModbusDeviceConfigDataService, iDeviceTemplateService, iDeviceService)
	device := &deviceController.Device{
		Info:         deviceInfo,
		Group:        deviceGroup,
		Template:     template,
		TemplateData: templateData,
	}
	iMaterialDao := materialDaoImpl.NewMaterialDaoImpl(db)
	iMaterialService := materialServiceImpl.NewMaterialService(iMaterialDao, iUserDao)
	materialInfo := materialController.NewMaterialInfo(iMaterialService)
	material := &materialController.Material{
		Material: materialInfo,
	}
	iDataSetDao := aiDataSetDaoImpl.NewDataSetDaoImpl(db)
	client := aiDataSetServiceImpl.NewHttpClient()
	iDataSetService := aiDataSetServiceImpl.NewIDataSetServiceImpl(iDataSetDao, iDeptDao, iUserDao, client)
	iDataSetDocumentDao := aiDataSetDaoImpl.NewIDataSetDocumentDaoImpl(db)
	iDataSetDocumentService := aiDataSetServiceImpl.NewIDataSetDocumentServiceImpl(client, iDataSetDao, iDataSetDocumentDao)
	iChunkService := aiDataSetServiceImpl.NewIChunkServiceImpl(client)
	iAssistantService := aiDataSetServiceImpl.NewIAssistantServiceImpl(client)
	iChartService := aiDataSetServiceImpl.NewIChartServiceImpl(client)
	dataset := aiDataSetController.NewDataset(iDataSetService, iDataSetDocumentService, iChunkService, iAssistantService, iChartService)
	iAiPredictionExceptionDao := aiDataSetDaoImpl.NewIAiPredictionExceptionDaoImpl(db)
	iAiPredictionExceptionService := aiDataSetServiceImpl.NewIAiPredictionExceptionServiceImpl(iAiPredictionExceptionDao)
	exception := aiDataSetController.NewException(iAiPredictionExceptionService)
	iAiPredictionListDao := aiDataSetDaoImpl.NewIAiPredictionListDaoImpl(db)
	iAiPredictionService := aiDataSetServiceImpl.NewIAiPredictionServiceImpl(iAiPredictionListDao)
	prediction := aiDataSetController.NewPrediction(iAiPredictionService)
	iAiPredictionControlDao := aiDataSetDaoImpl.NewIAiPredictionControlDaoImpl(db)
	iAiPredictionControlService := aiDataSetServiceImpl.NewIAiPredictionControlServiceImpl(iAiPredictionControlDao)
	control := aiDataSetController.NewControl(iAiPredictionControlService)
	aiDataSet := &aiDataSetController.AiDataSet{
		Dataset:    dataset,
		Exception:  exception,
		Prediction: prediction,
		Control:    control,
	}
	iCraftRouteDao := craftRouteDaoImpl.NewCraftRouteDaoImpl(db)
	iProcessDao := craftRouteDaoImpl.NewIProcessDaoImpl(db)
	iRouteProcessDao := craftRouteDaoImpl.NewIProcessRouteDaoImpl(db)
	iProcessContextDao := craftRouteDaoImpl.NewProcessContextDaoImpl(db)
	iSysProRouteProductBomDao := craftRouteDaoImpl.NewSysProRouteProductBomDaoImpl(db)
	iSysProRouteProductDao := craftRouteDaoImpl.NewISysProRouteProductDaoImpl(db)
	iSysCraftRouteConfigDao := craftRouteDaoImpl.NewISysCraftRouteConfigDaoImpl(db)
	iCraftRouteService := craftRouteServiceImpl.NewCraftRouteServiceImpl(iCraftRouteDao, iProcessDao, iRouteProcessDao, iProcessContextDao, iSysProRouteProductBomDao, iSysProRouteProductDao, iSysCraftRouteConfigDao)
	craft := craftRouteController.NewCraft(iCraftRouteService)
	iCraftProcessService := craftRouteServiceImpl.NewICraftProcessServiceImpl(iProcessDao, iUserDao)
	process := craftRouteController.NewProcess(iCraftProcessService)
	iCraftProcessContextService := craftRouteServiceImpl.NewICraftProcessContextServiceImpl(iProcessContextDao, iUserDao)
	processContext := craftRouteController.NewProcessContext(iCraftProcessContextService)
	iProcessRouteService := craftRouteServiceImpl.NewIProcessRouteServiceImpl(iRouteProcessDao, iProcessDao, iCraftRouteDao)
	routeProcess := craftRouteController.NewSysProRouteProcess(iProcessRouteService)
	iSysProRouteProductService := craftRouteServiceImpl.NewSysProRouteProductServiceImpl(iSysProRouteProductDao)
	routeProduct := craftRouteController.NewRouteProduct(iSysProRouteProductService)
	iSysProRouteProductBomService := craftRouteServiceImpl.NewISysProRouteProductBomServiceImpl(iSysProRouteProductBomDao)
	routeProductBom := craftRouteController.NewRouteProductBom(iSysProRouteProductBomService)
	iSysProWorkorderDao := craftRouteDaoImpl.NewWorkOrderDaoImpl(db)
	iSysProWorkorderService := craftRouteServiceImpl.NewISysProWorkorderServiceImpl(iSysProWorkorderDao)
	workOrder := craftRouteController.NewWorkOrder(iSysProWorkorderService)
	iSysProTaskDao := craftRouteDaoImpl.NewISysProTaskDaoImpl(db)
	iSysProTaskService := craftRouteServiceImpl.NewISysProTaskServiceImpl(iSysProWorkorderDao, iSysProTaskDao)
	iotAgentDao := daemonizeDaoImpl.NewIotAgentDaoImpl(db, cacheCache)
	iotAgentProcess := daemonizeDaoImpl.NewIotAgentProcessDaoImpl(cacheCache)
	iotAgentService := daemonizeServiceImpl.NewIotAgentServiceImpl(iotAgentDao, iotAgentProcess)
	task := craftRouteController.NewTask(iSysProTaskService, iotAgentService)
	iScheduleDao := craftRouteDaoImpl.NewIScheduleDaoImpl(db)
	iScheduleMapDao := craftRouteDaoImpl.NewIScheduleMapDaoImpl(db)
	iScheduleService := craftRouteServiceImpl.NewIScheduleServiceImpl(iScheduleDao, db, iScheduleMapDao, iCraftRouteDao, iSysCraftRouteConfigDao)
	schedule := craftRouteController.NewSchedule(iScheduleService, iotAgentService)
	craftRoute := &craftRouteController.CraftRoute{
		CraftRoute:      craft,
		Process:         process,
		ProcessContext:  processContext,
		RouteProcess:    routeProcess,
		RouteProduct:    routeProduct,
		RouteProductBom: routeProductBom,
		WorkOrder:       workOrder,
		Task:            task,
		Schedule:        schedule,
	}
	iMetricService := metricServiceImpl.NewIMetricServiceImpl(iMetricDao, cacheCache)
	metric := metricController.NewMetric(iMetricService)
	metricServer := &metricController.MetricServer{
		Metric: metric,
	}
	iotAgentConfigDao := daemonizeDaoImpl.NewIotAgentConfigDaoImpl(db)
	daemonizeService := daemonizeServiceImpl.NewDaemonizeServiceImpl(iotAgentDao, iotAgentProcess, iotAgentConfigDao)
	daemonize := daemonizeController.NewDaemonize(daemonizeService)
	iotAgent := daemonizeController.NewIotAgentController(iotAgentService, daemonizeService)
	alertRuleDao := alertDaoImpl.NewAlertRuleDaoImpl(db)
	alertSinkTemplateDao := alertDaoImpl.NewAlertSinkTemplateDaoImpl(db)
	iGatewayConfigService := daemonizeServiceImpl.NewIGatewayConfigServiceImpl(iDeviceDao, iDeviceTemplateDao, iSysModbusDeviceConfigDataDao, alertRuleDao, alertSinkTemplateDao, iDeviceElectricDao, iDictDataDao)
	iotAgentConfigService := daemonizeServiceImpl.NewIotAgentConfigServiceImpl(iotAgentConfigDao)
	daemonizeControllerConfig := daemonizeController.NewConfig(iGatewayConfigService, iotAgentConfigService, iotAgentService)
	daemonizeServer := &daemonizeController.DaemonizeServer{
		Daemonize: daemonize,
		IotAgent:  iotAgent,
		Config:    daemonizeControllerConfig,
	}
	deviceMonitorService := deviceMonitorServiceImpl.NewDeviceMonitorServiceImpl(iDeviceDao, cacheCache, iMetricDao, iSysModbusDeviceConfigDataDao)
	deviceMonitor := deviceMonitorController.NewDeviceMonitor(deviceMonitorService)
	iDeviceDataReportService := deviceMonitorServiceImpl.NewIDeviceDataReportServiceImpl(iDeviceDataReportDao, iDeviceDao)
	iDevMapService := metricServiceImpl.NewIDevMapServiceImpl(iDeviceDataReportDao, iDeviceDao)
	deviceReport := deviceMonitorController.NewDeviceReport(iMetricService, iDeviceDataReportService, iDevMapService)
	buildingDao := buildingDaoImpl.NewBuildingDaoImpl(db)
	deviceUtilizationDao := deviceMonitorDaoImpl.NewDeviceUtilizationDaoImpl(iotDb, iSysShiftDao, iDeviceDao, buildingDao)
	deviceUtilizationService := deviceMonitorServiceImpl.NewDeviceUtilizationServiceImpl(deviceUtilizationDao)
	deviceUtilization := deviceMonitorController.NewDeviceUtilization(deviceUtilizationService)
	deviceMonitorControllerDeviceMonitorController := &deviceMonitorController.DeviceMonitorController{
		DeviceMonitor:     deviceMonitor,
		DeviceReport:      deviceReport,
		DeviceUtilization: deviceUtilization,
	}
	alertActionDao := alertDaoImpl.NewAlertActionDaoImpl(db)
	alertAiReasonDao := alertDaoImpl.NewAlertAiReasonDaoImpl(db)
	alertRuleService := alertServiceImpl.NewAlertRuleServiceImpl(alertRuleDao, iotAgentDao, alertSinkTemplateDao, alertActionDao, alertAiReasonDao)
	alert := alertController.NewAlert(alertRuleService)
	alertTemplateService := alertServiceImpl.NewAlertTemplateServiceImpl(alertSinkTemplateDao)
	alertTemplate := alertController.NewAlertTemplate(alertTemplateService)
	alertLogDao := alertDaoImpl.NewAlertLogDaoImpl(db)
	alertLogService := alertServiceImpl.NewAlertLogServiceImpl(alertLogDao, alertRuleDao, iotAgentDao)
	alertLog := alertController.NewAlertLog(alertLogService)
	alertActionService := alertServiceImpl.NewAlertActionServiceImpl(alertActionDao)
	alertAction := alertController.NewAlertAction(alertActionService, iDictDataService)
	alertAiReasonService := alertServiceImpl.NewAlertAiReasonServiceImpl(alertAiReasonDao)
	alertAiReason := alertController.NewAlertAiReason(alertAiReasonService)
	runnerService := alertServiceImpl.NewRunnerServiceImpl(iChartService)
	runner := alertController.NewRunner(alertRuleService, runnerService, iChartService, iDeviceDao, alertLogDao)
	controller := &alertController.Controller{
		Alert:         alert,
		AlertTemplate: alertTemplate,
		AlertLog:      alertLog,
		AlertAction:   alertAction,
		AlertAiReason: alertAiReason,
		Runner:        runner,
	}
	buildingService := buildingServiceImpl.NewBuildingServiceImpl(buildingDao)
	building := buildingController.NewBuilding(buildingService)
	buildingControllerController := buildingController.Controller{
		Building: building,
	}
	dashboardDao := dashboardDaoImpl.NewDashboardDaoImpl(db)
	dashboardService := dashboardServiceImpl.NewDashboardServiceImpl(dashboardDao, iMetricDao)
	dashboard := dashboardController.NewDashboard(dashboardService)
	dashboardDataDao := dashboardDaoImpl.NewDashboardDataDaoImpl(db)
	dashboardDataService := dashboardServiceImpl.NewDashboardDataServiceImpl(dashboardDataDao)
	data := dashboardController.NewData(dashboardDataService)
	dashboardControllerController := dashboardController.Controller{
		Dashboard: dashboard,
		Data:      data,
	}
	engine := routes.NewGinEngine(cacheCache, system, monitor, tool, device, material, aiDataSet, craftRoute, metricServer, daemonizeServer, deviceMonitorControllerDeviceMonitorController, controller, buildingControllerController, dashboardControllerController)
	return engine, func() {
		cleanup()
	}, nil
}
